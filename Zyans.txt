第28行表达式cc + a[x[i - 1]][x[j]] < bestc || bestc == 0 的作用：
首先，这句话中cc + a[x[i - 1]][x[j]]表示当前我们从1城市出发，经过若干城市到达x[i - 1]城市并且现在要去x[j]城市的总消耗，
由于bestc代表了当前我们能找的最优答案，即当前我们从1城市出发，经过所有城市刚好1次并返回1城市的路程，而如果不满足cc + a[x[i - 1]][x[j]] < bestc这个条件
则说明我们从1城市，出发，经过若干城市到达了x[i - 1]城市，并且要去x[j]城市，显然这个时候我们距离回到1城市还需要经过若干个城市，然而现在我们走的路径比之前
求得的走了一圈回到1城市的路径还长，那这种情况我们就没有必要继续去算了，因为答案一定不会更优，例如：
1： 1 -> ... -> x[i] ... -> 1 
2:  1 -> ... -> x'[i - 1] -> x'[j] ... -> 1
1号路径为我们bestc代表的路径，我们从1开始，经过了所有城市回到1，路程为bestc；
2号路径为我们当前回溯到的路径，从1开始，经过了x'[i - 1]，到达了x'[j]，仍需经过经过若干城市才能回到1。
对于路径2我们走到x'[j]的时候就已经走过了超过bestc的路径了，那么当他走回1的时候，路径肯定远大于bestc故不需继续回溯处理下去了。

由于刚开始bestc的初始值为0，所以不能试用上述的论断，故而要特殊判断，这是 || bestc == 0的作用

修改方式：
1: 将bestc的初始值赋成Int.MaxVal, 即 2147483647，或任意较大数字例如0x3f3f3f3f, 并将 || bestc == 0去掉
说明：
    这种修改方式不会降低复杂度，只会让if语句少一个判断，属于常数级别优化，意义较小。
2: 在1的前提下，添加一个新的数组vis,大小与城市个数相同，这样可以保证相同的城市不会重复到达，将if语句修改为：
    if (... && cc + a[x[i - 1]][x[j]] < bestc && !vis[x[j]])
说明：
    这种修改方式对算法效率有较大的提升，减少了大量的重复数据，可以显著提升算法的效率。

如果这个消耗比我们当前求得的最优消耗(bestc)要小，则说明这条路径(1 -> ... -> x[i - 1] -> x[j] -> ...)更优，则我们选择这条消耗
更优的路径作为当前的最优。
而bestc == 0 则说明现在我们还没有求出任何一条可行的路径，所以我们要将当前的路径作为最优的。

